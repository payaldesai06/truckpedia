{"version":3,"sources":["webpack:///./resources/js/src/views/pages/calender/components/DirectionsRenderer.js"],"names":["MapElementFactory","name","ctr","window","google","maps","DirectionsRenderer","events","mappedProps","props","origin","type","Object","Array","waypoints","destination","travelMode","String","optimizeWaypoints","Boolean","data","directionsService","directionsRenderer","afterCreate","DirectionsService","refreshMap","$watch","methods","route","response","status","setDirections"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEeA,yIAAiBA,CAAC;AAC/BC,QAAM,oBADyB;AAE/BC,KAF+B,iBAEzB;AACJ,WAAOC,OAAOC,MAAP,CAAcC,IAAd,CAAmBC,kBAA1B;AACD,GAJ8B;AAK/BC,UAAQ,EALuB;AAM/BC,eAAa,EANkB;AAO/BC,SAAO;AACLC,YAAQ;AAACC,YAAM,CAACC,MAAD,EAASC,KAAT;AAAP,KADH;AAELC,eAAW;AAACH,YAAME;AAAP,KAFN;AAGLE,iBAAa;AAACJ,YAAM,CAACC,MAAD,EAASC,KAAT;AAAP,KAHR;AAILG,gBAAY;AAACL,YAAMM;AAAP,KAJP;AAKLC,uBAAmB;AAACP,YAAMQ;AAAP;AALd,GAPwB;AAe/BC,MAf+B,kBAexB;AACL,WAAO;AACLC,yBAAmB,IADd;AAELC,0BAAoB;AAFf,KAAP;AAID,GApB8B;AAsB/B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACAC,aAjC+B,uBAiCnBD,kBAjCmB,EAiCC;AAAA;;AAC9B;AACA,SAAKD,iBAAL,GAAyB,IAAIlB,OAAOC,MAAP,CAAcC,IAAd,CAAmBmB,iBAAvB,EAAzB;AACA,SAAKF,kBAAL,GAA0BA,kBAA1B;AACA,SAAKG,UAAL;AACA,SAAKC,MAAL,CACI;AAAA,aACI,CAAC,MAAKhB,MAAN,EAAc,MAAKI,SAAnB,EAA8B,MAAKC,WAAnC,EAAgD,MAAKC,UAArD,EACC,MAAKE,iBADN,CADJ;AAAA,KADJ,EAII,YAAM;AACJ,YAAKO,UAAL;AACD,KANL;AAOD,GA7C8B;AA+C/BE,WAAS;AACPF,cADO,wBACM;AAAA;;AAAA,UACNf,MADM,GAEP,IAFO,CACNA,MADM;AAAA,UACEI,SADF,GAEP,IAFO,CACEA,SADF;AAAA,UACaC,WADb,GAEP,IAFO,CACaA,WADb;AAAA,UAC0BC,UAD1B,GAEP,IAFO,CAC0BA,UAD1B;AAAA,UACsCE,iBADtC,GAEP,IAFO,CACsCA,iBADtC;;AAGX,UAAI,CAAC,KAAKR,MAAN,IAAgB,CAAC,KAAKK,WAAtB,IAAqC,CAAC,KAAKC,UAA3C,IACA,CAAC,KAAKF,SADV,EACqB;AACnB;AACD;;AACD,WAAKO,iBAAL,CAAuBO,KAAvB,CACI;AAAClB,sBAAD;AAASK,gCAAT;AAAsBD,4BAAtB;AAAiCE,8BAAjC;AAA6CE;AAA7C,OADJ,EAEI,UAACW,QAAD,EAAWC,MAAX,EAAsB;AACpB,YAAIA,WAAW,IAAf,EAAqB;;AACrB,eAAKR,kBAAL,CAAwBS,aAAxB,CAAsCF,QAAtC;AACD,OALL;AAMD;AAdM;AA/CsB,CAAlB,CAAf,E","file":"js/chunks/238.js","sourcesContent":["import {MapElementFactory} from 'vue2-google-maps';\r\n\r\nexport default MapElementFactory({\r\n  name: 'directionsRenderer',\r\n  ctr() {\r\n    return window.google.maps.DirectionsRenderer;\r\n  },\r\n  events: [],\r\n  mappedProps: {},\r\n  props: {\r\n    origin: {type: [Object, Array]},\r\n    waypoints: {type: Array},\r\n    destination: {type: [Object, Array]},\r\n    travelMode: {type: String},\r\n    optimizeWaypoints: {type: Boolean}\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      directionsService: null,\r\n      directionsRenderer: null,\r\n    };\r\n  },\r\n\r\n  // When the shared link page is opened on a new browser (or incognito mode)\r\n  // for the first time, watch() notices orgin change, then afterCreate() is\r\n  // called with origin != null. Therefore, if we only use this.$watch() in\r\n  // afterCreate(), the code will not render the map correctly because origin\r\n  // will never change! However, when we refresh the page, afterCreate() is\r\n  // called with origin == null before watch(), that is why the old code works\r\n  // only after we refresh the page.\r\n\r\n  // On the other hand, when there is truck and we get its location from Samsara\r\n  // or KeepTruckin, the map is loaded correctly because truck data comes after\r\n  // afterCreate() is called.\r\n  afterCreate(directionsRenderer) {\r\n    // console.log('afterCreate(): ' + JSON.stringify(this.origin));\r\n    this.directionsService = new window.google.maps.DirectionsService();\r\n    this.directionsRenderer = directionsRenderer;\r\n    this.refreshMap();\r\n    this.$watch(\r\n        () =>\r\n            [this.origin, this.waypoints, this.destination, this.travelMode,\r\n             this.optimizeWaypoints],\r\n        () => {\r\n          this.refreshMap();\r\n        });\r\n  },\r\n\r\n  methods: {\r\n    refreshMap() {\r\n      let {origin, waypoints, destination, travelMode, optimizeWaypoints} =\r\n          this;\r\n      if (!this.origin || !this.destination || !this.travelMode ||\r\n          !this.waypoints) {\r\n        return;\r\n      }\r\n      this.directionsService.route(\r\n          {origin, destination, waypoints, travelMode, optimizeWaypoints},\r\n          (response, status) => {\r\n            if (status !== 'OK') return;\r\n            this.directionsRenderer.setDirections(response);\r\n          });\r\n    }\r\n  },\r\n});"],"sourceRoot":""}