{"version":3,"sources":["webpack:///./resources/js/src/mixins/googleMapMixin.js"],"names":["data","GMAPS","created","$gmapApiPromiseLazy","maps","$vs","notify","color","title","text","response","message","methods","getGoogleMapDistanceBetween","directionRequest","callback","DirectionsService","route","travelMode","status","getGoogleDistanceBetweenMultipleRoutes","routes","distance","routeKey","directionsData","legs","value","getGeocoderLatLng","address","Geocoder","geocode","getPlaceDetails","placeId","map","placesService","places","PlacesService","$mapObject","resolve","reject","getDetails","place","getCoordinatesFromAddress","results","location","geometry","lat","lng"],"mappings":"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","file":"js/chunks/9.js","sourcesContent":["export default {\r\n  data () {\r\n    return {\r\n      GMAPS: null\r\n    }\r\n  },\r\n\r\n  async created () {\r\n    try {\r\n      const {maps} = await this.$gmapApiPromiseLazy()\r\n      this.GMAPS = maps\r\n    } catch (error) {\r\n      this.$vs.notify({\r\n        color: 'danger',\r\n        title: 'Error',\r\n        text: error.response.data.message\r\n      })\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async getGoogleMapDistanceBetween (directionRequest, callback) {\r\n      if (!this.GMAPS) return callback(null, 'ERROR')\r\n\r\n      await new this.GMAPS.DirectionsService()\r\n        .route({travelMode: 'DRIVING', ...directionRequest}, async function (response, status) {\r\n          await callback(response, status)\r\n        })\r\n    },\r\n\r\n    async getGoogleDistanceBetweenMultipleRoutes (routes = []) {\r\n      let distance = 0\r\n\r\n      for (const routeKey in routes) {\r\n        await this.getGoogleMapDistanceBetween(routes[routeKey], async (response) => {\r\n          const directionsData = response.routes[0].legs[0]\r\n          if (!directionsData) return 0\r\n\r\n          distance += +directionsData.distance.value\r\n        })\r\n      }\r\n\r\n      return distance\r\n    },\r\n\r\n    async getGeocoderLatLng (address) {\r\n      if (!this.GMAPS) {\r\n        const {maps} = await this.$gmapApiPromiseLazy();\r\n        this.GMAPS = maps\r\n      }\r\n      const Geocoder = new this.GMAPS.Geocoder()\r\n        if (typeof address === 'object') return await Geocoder.geocode(address);\r\n        else return await Geocoder.geocode({ address });\r\n    },\r\n\r\n    getPlaceDetails (placeId, map) {\r\n      const placesService = new this.GMAPS.places.PlacesService(map.$mapObject);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        placesService.getDetails({ placeId }, (place, status) => {\r\n          if (status === \"OK\") resolve(place);\r\n          else reject(status);\r\n        });\r\n      });\r\n    },\r\n\r\n    async getCoordinatesFromAddress(address) {\r\n      const { results } = await this.getGeocoderLatLng(address);\r\n      const {\r\n        geometry: { location },\r\n      } = results[0];\r\n\r\n      return { lat: location.lat(), lng: location.lng() };\r\n    }\r\n      \r\n  }\r\n}\r\n"],"sourceRoot":""}